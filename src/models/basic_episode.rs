/* 
 * TheTVDB API v2
 *
 * API v2 targets v1 functionality with a few minor additions. The API is accessible via https://api.thetvdb.com and provides the following REST endpoints in JSON format.   How to use this API documentation ----------------   You may browse the API routes without authentication, but if you wish to send requests to the API and see response data, then you must authenticate. 1. Obtain a JWT token by `POST`ing  to the `/login` route in the `Authentication` section with your API key and credentials. 1. Paste the JWT token from the response into the \"JWT Token\" field at the top of the page and click the 'Add Token' button.   You will now be able to use the remaining routes to send requests to the API and get a response.   Language Selection ----------------   Language selection is done via the `Accept-Language` header. At the moment, you may only pass one language abbreviation in the header at a time. Valid language abbreviations can be found at the `/languages` route..   Authentication ----------------   Authentication to use the API is similar to the How-to section above. Users must `POST` to the `/login` route with their API key and credentials in the following format in order to obtain a JWT token.  `{\"apikey\":\"APIKEY\",\"username\":\"USERNAME\",\"userkey\":\"USERKEY\"}`  Note that the username and key are ONLY required for the `/user` routes. The user's key is labled `Account Identifier` in the account section of the main site. The token is then used in all subsequent requests by providing it in the `Authorization` header. The header will look like: `Authorization: Bearer <yourJWTtoken>`. Currently, the token expires after 24 hours. You can `GET` the `/refresh_token` route to extend that expiration date.   Versioning ----------------   You may request a different version of the API by including an `Accept` header in your request with the following format: `Accept:application/vnd.thetvdb.v$VERSION`. This documentation automatically uses the version seen at the top and bottom of the page.
 *
 * OpenAPI spec version: 2.2.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct BasicEpisode {
  #[serde(rename = "absoluteNumber")]
  absolute_number: Option<i32>,
  #[serde(rename = "airedEpisodeNumber")]
  aired_episode_number: Option<i32>,
  #[serde(rename = "airedSeason")]
  aired_season: Option<i32>,
  #[serde(rename = "dvdEpisodeNumber")]
  dvd_episode_number: Option<i32>,
  #[serde(rename = "dvdSeason")]
  dvd_season: Option<i32>,
  #[serde(rename = "episodeName")]
  episode_name: Option<String>,
  #[serde(rename = "firstAired")]
  first_aired: Option<String>,
  #[serde(rename = "id")]
  id: Option<i32>,
  #[serde(rename = "language")]
  language: Option<crate::models::EpisodeLanguageInfo>,
  #[serde(rename = "lastUpdated")]
  last_updated: Option<i32>,
  #[serde(rename = "overview")]
  overview: Option<String>
}

impl BasicEpisode {
  pub fn new() -> BasicEpisode {
    BasicEpisode {
      absolute_number: None,
      aired_episode_number: None,
      aired_season: None,
      dvd_episode_number: None,
      dvd_season: None,
      episode_name: None,
      first_aired: None,
      id: None,
      language: None,
      last_updated: None,
      overview: None
    }
  }

  pub fn set_absolute_number(&mut self, absolute_number: i32) {
    self.absolute_number = Some(absolute_number);
  }

  pub fn with_absolute_number(mut self, absolute_number: i32) -> BasicEpisode {
    self.absolute_number = Some(absolute_number);
    self
  }

  pub fn absolute_number(&self) -> Option<&i32> {
    self.absolute_number.as_ref()
  }

  pub fn reset_absolute_number(&mut self) {
    self.absolute_number = None;
  }

  pub fn set_aired_episode_number(&mut self, aired_episode_number: i32) {
    self.aired_episode_number = Some(aired_episode_number);
  }

  pub fn with_aired_episode_number(mut self, aired_episode_number: i32) -> BasicEpisode {
    self.aired_episode_number = Some(aired_episode_number);
    self
  }

  pub fn aired_episode_number(&self) -> Option<&i32> {
    self.aired_episode_number.as_ref()
  }

  pub fn reset_aired_episode_number(&mut self) {
    self.aired_episode_number = None;
  }

  pub fn set_aired_season(&mut self, aired_season: i32) {
    self.aired_season = Some(aired_season);
  }

  pub fn with_aired_season(mut self, aired_season: i32) -> BasicEpisode {
    self.aired_season = Some(aired_season);
    self
  }

  pub fn aired_season(&self) -> Option<&i32> {
    self.aired_season.as_ref()
  }

  pub fn reset_aired_season(&mut self) {
    self.aired_season = None;
  }

  pub fn set_dvd_episode_number(&mut self, dvd_episode_number: i32) {
    self.dvd_episode_number = Some(dvd_episode_number);
  }

  pub fn with_dvd_episode_number(mut self, dvd_episode_number: i32) -> BasicEpisode {
    self.dvd_episode_number = Some(dvd_episode_number);
    self
  }

  pub fn dvd_episode_number(&self) -> Option<&i32> {
    self.dvd_episode_number.as_ref()
  }

  pub fn reset_dvd_episode_number(&mut self) {
    self.dvd_episode_number = None;
  }

  pub fn set_dvd_season(&mut self, dvd_season: i32) {
    self.dvd_season = Some(dvd_season);
  }

  pub fn with_dvd_season(mut self, dvd_season: i32) -> BasicEpisode {
    self.dvd_season = Some(dvd_season);
    self
  }

  pub fn dvd_season(&self) -> Option<&i32> {
    self.dvd_season.as_ref()
  }

  pub fn reset_dvd_season(&mut self) {
    self.dvd_season = None;
  }

  pub fn set_episode_name(&mut self, episode_name: String) {
    self.episode_name = Some(episode_name);
  }

  pub fn with_episode_name(mut self, episode_name: String) -> BasicEpisode {
    self.episode_name = Some(episode_name);
    self
  }

  pub fn episode_name(&self) -> Option<&String> {
    self.episode_name.as_ref()
  }

  pub fn reset_episode_name(&mut self) {
    self.episode_name = None;
  }

  pub fn set_first_aired(&mut self, first_aired: String) {
    self.first_aired = Some(first_aired);
  }

  pub fn with_first_aired(mut self, first_aired: String) -> BasicEpisode {
    self.first_aired = Some(first_aired);
    self
  }

  pub fn first_aired(&self) -> Option<&String> {
    self.first_aired.as_ref()
  }

  pub fn reset_first_aired(&mut self) {
    self.first_aired = None;
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i32) -> BasicEpisode {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i32> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_language(&mut self, language: crate::models::EpisodeLanguageInfo) {
    self.language = Some(language);
  }

  pub fn with_language(mut self, language: crate::models::EpisodeLanguageInfo) -> BasicEpisode {
    self.language = Some(language);
    self
  }

  pub fn language(&self) -> Option<&crate::models::EpisodeLanguageInfo> {
    self.language.as_ref()
  }

  pub fn reset_language(&mut self) {
    self.language = None;
  }

  pub fn set_last_updated(&mut self, last_updated: i32) {
    self.last_updated = Some(last_updated);
  }

  pub fn with_last_updated(mut self, last_updated: i32) -> BasicEpisode {
    self.last_updated = Some(last_updated);
    self
  }

  pub fn last_updated(&self) -> Option<&i32> {
    self.last_updated.as_ref()
  }

  pub fn reset_last_updated(&mut self) {
    self.last_updated = None;
  }

  pub fn set_overview(&mut self, overview: String) {
    self.overview = Some(overview);
  }

  pub fn with_overview(mut self, overview: String) -> BasicEpisode {
    self.overview = Some(overview);
    self
  }

  pub fn overview(&self) -> Option<&String> {
    self.overview.as_ref()
  }

  pub fn reset_overview(&mut self) {
    self.overview = None;
  }

}
